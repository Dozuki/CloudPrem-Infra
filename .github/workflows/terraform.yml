name: 'Terraform'

on:
  push:
    branches:
    - main
    - terratest-github
    - aws-provider-upgrade

concurrency: test-suite
jobs:
  static:
    name: 'Static Analysis'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [physical, logical]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
        terraform_version: 1.1.8

    - name: Terraform ${{ matrix.module }} Module Init
      run: terraform init
      working-directory: ./cloudprem/${{ matrix.module }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format Check
      run: terraform fmt -check
      working-directory: ./cloudprem/${{ matrix.module }}

    # Performs linting on the Terraform files
    - name: Terraform Linter
      uses: reviewdog/action-tflint@master
      with:
        github_token: ${{ secrets.github_token }}
        working_directory: "./cloudprem/${{ matrix.module }}" # Optional. Change working directory
        reporter: github-pr-review # Optional. Change reporter
        fail_on_error: "true" # Optional. Fail action if errors are found
        filter_mode: "nofilter" # Optional. Check all files, not just the diff
        tflint_rulesets: "aws" # Optional. Extra official rulesets to install

    - name: Terraform Security Review
      uses: reviewdog/action-tfsec@master
      with:
        github_token: ${{ secrets.github_token }}
        working_directory: ./cloudprem/${{ matrix.module }}
        level: info
        reporter: github-pr-review
        filter_mode: nofilter
        tfsec_version: v1.21.2
        tfsec_flags: --exclude-downloaded-modules

  get_test_list:
    runs-on: ubuntu-latest
    name: "List test cases for dynamic matrix"
    needs: static
    steps:
      - uses: actions/checkout@v2
      - name: Get list of test conditions
        id: set-matrix
        working-directory: live/tests/src
        run: echo "::set-output name=matrix::$(ls -d * |grep -v go. | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
  test:
    needs: get_test_list
    name: 'Run tests'
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        testcase: ${{ fromJson(needs.get_test_list.outputs.matrix) }}
    defaults:
      run:
        shell: bash
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
      - name: install-aws-cli-action
        uses: unfor19/install-aws-cli-action@v1.0.3
      - uses: actions/setup-go@v3
        with:
          go-version: '~1.18.5'
      - name: Add profile credentials to ~/.aws/credentials
        run: |
            aws configure set aws_access_key_id ${{ secrets.TEST_STANDARD_AWS_ACCESS_KEY_ID }} --profile default
            aws configure set aws_secret_access_key ${{ secrets.TEST_STANDARD_AWS_SECRET_ACCESS_KEY }} --profile default
            aws configure set aws_access_key_id ${{ secrets.TEST_GOV_AWS_ACCESS_KEY_ID }} --profile gov
            aws configure set aws_secret_access_key ${{ secrets.TEST_GOV_AWS_SECRET_ACCESS_KEY }} --profile gov
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          terraform_version: 1.1.8
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: 0.37.1
      - name: Download common Go Modules
        working-directory: live/tests/common
        run: go mod download
      - name: Download src Go Modules
        working-directory: live/tests/src
        run: go mod download
      - name: Run Tests
        working-directory: live/tests/src
        run: go test -v -count 1 -timeout 300m ${{ matrix.testcase }}
  clean:
    needs: test
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: install-aws-cli-action
        uses: unfor19/install-aws-cli-action@v1.0.3
      - name: Add profile credentials to ~/.aws/credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.TEST_STANDARD_AWS_ACCESS_KEY_ID }} --profile default
          aws configure set aws_secret_access_key ${{ secrets.TEST_STANDARD_AWS_SECRET_ACCESS_KEY }} --profile default
          aws configure set aws_access_key_id ${{ secrets.TEST_GOV_AWS_ACCESS_KEY_ID }} --profile gov
          aws configure set aws_secret_access_key ${{ secrets.TEST_GOV_AWS_SECRET_ACCESS_KEY }} --profile gov
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          terraform_version: 1.1.8
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: 0.37.1
      - name: Setup AWSweeper
        run: |
          curl -sSfL https://raw.githubusercontent.com/jckuester/awsweeper/master/install.sh | sh -s v0.12.0
          mv ./bin/awsweeper /usr/local/bin/awsweeper
      - name: Setup Cloud-Nuke
        run: |
          curl -L https://github.com/gruntwork-io/cloud-nuke/releases/download/v0.16.2/cloud-nuke_linux_amd64 > /usr/local/bin/cloud-nuke
          chmod 755 /usr/local/bin/cloud-nuke
      - name: Remove resources created during tests
        working-directory: live/
        run: ./clean.sh
  fail-on-tests:
    # Without this step workflow remains "green" if testing does fail.
    name: Test Status -> Workflow Status
    needs:
      - clean
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Check Job Status status and fail if they are red
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1



